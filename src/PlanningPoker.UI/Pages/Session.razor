@inject ISessionService _sessionService;
@implements IDisposable

@page "/session/{sessionId}"

<PageTitle>Planning Poker | @@angelitocsg</PageTitle>

<div class="game-container">
    <div class="game-area">
        <div class="game-top">
            <div class="player-seats-top">
                <CardContainer Label="Jogador A" />
                <CardContainer Label="Jogador B" />
                <CardContainer Label="Jogador C" />
                <CardContainer Label="Jogador D" />
                <CardContainer Label="Jogador E" />
                <CardContainer Label="Jogador F" />
            </div>
        </div>
        <div class="game-center">
            <div class="player-seats-left">
                <CardContainer Label=@_stateContainer.LocalPlayerName />
            </div>
            <GameTable Active=@Started>
                <SessionTimer StartedAt=@StartedAt OnClick=@HandleToggleStartStop />
            </GameTable>
            <div class="player-seats-right">
                <CardContainer Label="Jogador" />
            </div>
        </div>
        <div class="game-bottom">
            <div class="player-seats-bottom">
                <CardContainer Label="Jogador" />
                <CardContainer Label="Jogador" />
                <CardContainer Label="Jogador">
                    <Card Side=Side.Back />
                </CardContainer>
                <CardContainer Label="Jogador">
                    <Card Side=Side.Front Number=8 />
                </CardContainer>
            </div>
        </div>
    </div>
    <div class="game-player">
        <PlayerTable Active=@Started PlayerName="Jogador A"></PlayerTable>
    </div>
</div>

@code {
    [Parameter]
    public string SessionId { get; set; }

    private DateTime StartedAt => _stateContainer?.GameSession?.StartedAt ?? DateTime.MinValue;
    private bool Started => _stateContainer?.GameSession?.Running ?? false;

    private async Task HandleToggleStartStop()
    {
        if (Started)
        {
            await _sessionService.StopSession();
            return;
        }

        await _sessionService.StartSession();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!(await _sessionService.ValidSession(SessionId)))
        {
            Console.WriteLine("Usuário não logado na sessão: {0}", SessionId);
            _navigationManager.NavigateTo($"/session/{SessionId}/enter");
            return;
        }

        _stateContainer.OnChange += StateHasChanged;

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _stateContainer.OnChange -= StateHasChanged;
    }
}