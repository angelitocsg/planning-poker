@using Core.ViewModels
@using System.Text.Json

@implements IDisposable
@inject ISessionService _sessionService;

@page "/session/{sessionId}"

<PageTitle>Planning Poker | @@angelitocsg</PageTitle>

<div class="game-container">
    <div class="game-area">
        <div class="game-top">
            <div class="player-seats-top">
                @foreach (var item in PlayersAtTop)
                {
                    @if (!string.IsNullOrWhiteSpace(item.PlayerName))
                    {
                        @if (item.cardSide == Side.Hidden)
                        {
                            <CardContainer Label=@item.PlayerName />
                        }
                        else
                        {
                            <CardContainer Label=@item.PlayerName>
                                <Card Side=item.cardSide Number=@item.Number />
                            </CardContainer>
                        }
                    }
                }
            </div>
        </div>
        <div class="game-center">
            <div class="player-seats-left">
                @if (LeftAndRight.Count > 0)
                {
                    @if (LeftAndRight[0].cardSide == Side.Hidden)
                    {
                        <CardContainer Label=@LeftAndRight[0].PlayerName />
                    }
                    else
                    {
                        <CardContainer Label=@LeftAndRight[0].PlayerName>
                            <Card Side=LeftAndRight[0].cardSide Number=@LeftAndRight[0].Number />
                        </CardContainer>
                    }
                }
            </div>
            <GameTable DescriptionFromHub=@GetDescription() OnDescriptionChange=@HandleDescriptionChange Active=@Running>
                <SessionTimer StartedAt=@StartedAt OnClick=@HandleToggleStartStop />
            </GameTable>
            <div class="player-seats-right">
                @if (LeftAndRight.Count > 1)
                {
                    @if (LeftAndRight[1].cardSide == Side.Hidden)
                    {
                        <CardContainer Label=@LeftAndRight[1].PlayerName />
                    }
                    else
                    {
                        <CardContainer Label=@LeftAndRight[1].PlayerName>
                            <Card Side=LeftAndRight[1].cardSide Number=@LeftAndRight[1].Number />
                        </CardContainer>
                    }
                }
            </div>
        </div>
        <div class="game-bottom">
            <div class="player-seats-bottom">
                @foreach (var item in PlayersAtBottom)
                {
                    @if (!string.IsNullOrWhiteSpace(item.PlayerName))
                    {
                        @if (item.cardSide == Side.Hidden)
                        {
                            <CardContainer Label=@item.PlayerName />
                        }
                        else
                        {
                            <CardContainer Label=@item.PlayerName>
                                <Card Side=item.cardSide Number=@item.Number />
                            </CardContainer>
                        }
                    }
                }
            </div>
        </div>
    </div>
    <div class="game-player">
        @if (_stateContainer?.GameSession?.Ended ?? false)
        {
            <SummaryTable SummaryData=@_stateContainer?.SummaryData />
        }
        else
        {
            <PlayerTable Active=@Running PlayerName=@PlayerName Placed=@Placed() OnCardNumberClick=@HandleCardNumberClick></PlayerTable>
        }
    </div>
</div>

@code {
    [Parameter]
    public string SessionId { get; set; }

    private bool Running => _stateContainer?.GameSession?.Running ?? false;
    private DateTime StartedAt => Running ? _stateContainer?.GameSession?.StartedAt ?? DateTime.MinValue : DateTime.MinValue;
    private string PlayerName => _stateContainer?.LocalPlayerName ?? string.Empty;

    private List<(string PlayerName, CardNumber? Number, Side cardSide)> LeftAndRight { get; set; } = new List<(string PlayerName, CardNumber? Number, Side cardSide)>();
    private List<(string PlayerName, CardNumber? Number, Side cardSide)> PlayersAtTop { get; set; } = new List<(string PlayerName, CardNumber? Number, Side cardSide)>();
    private List<(string PlayerName, CardNumber? Number, Side cardSide)> PlayersAtBottom { get; set; } = new List<(string PlayerName, CardNumber? Number, Side cardSide)>();

    private CardNumber? Placed() => _stateContainer?.GameSession?.Players.FirstOrDefault(x => x.Name == _stateContainer?.LocalPlayerName)?.LastMove?.Number;
    private string GetDescription() => _stateContainer?.GameSession?.Description;

        private async Task HandleToggleStartStop()
    {
        if (Running)
        {
            await _sessionService.StopSession();
            return;
        }

        await _sessionService.StartSession();
    }

    private async Task HandleCardNumberClick(CardNumber number)
    {
        if (Running)
            await _sessionService.SelectCardNumber(number);
    }

    private async Task HandleDescriptionChange(string description)
    {
        await _sessionService.UpdateDescription(description);
    }

    private void PlacePlayerAroundTable()
    {
        Console.WriteLine("Description: {0}", GetDescription());

        LeftAndRight = new List<(string PlayerName, CardNumber? Number, Side cardSide)>();
        PlayersAtTop = new List<(string PlayerName, CardNumber? Number, Side cardSide)>();
        PlayersAtBottom = new List<(string PlayerName, CardNumber? Number, Side cardSide)>();

        if (_stateContainer.GameSession == null)
        {
            Console.WriteLine(JsonSerializer.Serialize(_stateContainer));
            _sessionService.JoinSession(SessionId, _stateContainer.LocalPlayerName);
            return;
        }

        var playersCount = _stateContainer.GameSession?.Players?.Count() ?? 0;
        var players = _stateContainer.GameSession?.Players.ToArray();
        Console.WriteLine("Players: {0}", playersCount);

        if (playersCount > 0)
            PositionPlayer(LeftAndRight, players[0]);

        if (playersCount > 1)
            PositionPlayer(LeftAndRight, players[1]);

        if (playersCount > 2)
            for (int i = 2; i < playersCount; i = i + 2)
            {
                PositionPlayer(PlayersAtTop, players[i]);

                if (i < playersCount)
                    PositionPlayer(PlayersAtBottom, players[i + 1]);
            }

        StateHasChanged();
    }

    private void PositionPlayer(List<(string PlayerName, CardNumber? Number, Side cardSide)> list, PlayerViewModel player)
    {
        list.Add((player.Name, player.LastMove?.Number,
            player.LastMove == null
                ? Side.Hidden
                : Running
                    ? Side.Back
                    : Side.Front));
    }

    protected override async Task OnInitializedAsync()
    {
        if (!(await _sessionService.ValidSession(SessionId)))
        {
            Console.WriteLine("Usuário não logado na sessão: {0}", SessionId);
            _navigationManager.NavigateTo($"/session/{SessionId}/enter");
            return;
        }

        if (!await _sessionService.HasSession(SessionId))
        {
            Console.WriteLine("Sessão {0} não existe.", SessionId);
            _navigationManager.NavigateTo($"/");
        }

        _stateContainer.OnChange += PlacePlayerAroundTable;
        PlacePlayerAroundTable();

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _stateContainer.OnChange -= PlacePlayerAroundTable;
    }
}