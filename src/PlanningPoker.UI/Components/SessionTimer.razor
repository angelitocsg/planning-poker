@implements IDisposable

<div class="session-container">
    <div class=@SessionTimerStyle()>
        <span class="session-timer-text">@($"{Timer.Minutes.ToString().PadLeft(2, '0')}:{Timer.Seconds.ToString().PadLeft(2, '0')}")</span>
    </div>
    <button type="button" class=@SessionButtonStyle() onclick=@OnClick>
        @Label
    </button>
</div>

@code {
    [Parameter]
    public Func<Task> OnClick { get; set; }

    [Parameter]
    public DateTime StartedAt { get; set; }

    [Parameter]
    public bool Running { get; set; }

    [Parameter]
    public bool Ended { get; set; }

    private TimeSpan Timer => Running ? DateTime.Now - StartedAt : TimeSpan.Zero;
    private TimerStatus Status => Running ? TimerStatus.Running : Ended ? TimerStatus.Stopped : TimerStatus.NotStarted;
    private Timer TimerTicker;

    // >> UI

    private string Label { get => Status == TimerStatus.NotStarted ? "iniciar" : Status == TimerStatus.Running ? "parar" : "reiniciar"; }

    private List<string> _sessionTimerStyle = CssHelper.Create("session-timer");
    private string SessionTimerStyle() => _sessionTimerStyle.Join();

    private List<string> _sessionButtonStyle = CssHelper.Create("btn", "btn-primary", "session-button");
    private string SessionButtonStyle() => _sessionButtonStyle.Join();

    // << UI

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        SetupStarted();
        SetupStoped();

        return base.OnParametersSetAsync();
    }

    public void Dispose() => TimerTicker?.Dispose();

    private void SetupStarted()
    {
        if (!Running)
            return;

        TimerTicker = new Timer(UpdateClock, null, 0, 1000);

        _sessionTimerStyle.AddClass("highlight");
        _sessionButtonStyle.AddClass("btn-secondary");
        _sessionButtonStyle.RemoveClass("btn-primary");
    }

    private void UpdateClock(object _) => InvokeAsync(StateHasChanged);

    private void SetupStoped()
    {
        if (Running)
            return;

        TimerTicker?.Dispose();

        _sessionTimerStyle.RemoveClass("highlight");
        _sessionButtonStyle.RemoveClass("btn-secondary");
        _sessionButtonStyle.AddClass("btn-primary");
    }
}